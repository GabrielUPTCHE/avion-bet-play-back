# Script de prueba para verificar sincronizaci√≥n de Redis
# test-redis-sync.ps1

Write-Host "üß™ Iniciando pruebas de sincronizaci√≥n de Redis..." -ForegroundColor Blue
Write-Host ""

# Funci√≥n para hacer petici√≥n HTTP
function Test-Endpoint {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [string]$Body = ""
    )
    
    try {
        if ($Method -eq "GET") {
            $response = Invoke-WebRequest -Uri $Url -UseBasicParsing -TimeoutSec 5
        } else {
            $response = Invoke-WebRequest -Uri $Url -Method $Method -Body $Body -ContentType "application/json" -UseBasicParsing -TimeoutSec 5
        }
        
        return @{
            Success = $true
            StatusCode = $response.StatusCode
            Content = $response.Content | ConvertFrom-Json
        }
    } catch {
        return @{
            Success = $false
            Error = $_.Exception.Message
        }
    }
}

# Prueba 1: Verificar que todas las instancias est√°n conectadas a Redis
Write-Host "üìä Prueba 1: Verificando conexiones Redis..." -ForegroundColor Yellow

for ($i = 1; $i -le 5; $i++) {
    $result = Test-Endpoint "http://localhost/health"
    if ($result.Success) {
        $instance = $result.Content.instance
        $redis = $result.Content.redis
        $color = if ($redis -eq "connected") { "Green" } else { "Red" }
        Write-Host "   ‚úì Instancia: $instance - Redis: $redis" -ForegroundColor $color
    } else {
        Write-Host "   ‚úó Error: $($result.Error)" -ForegroundColor Red
    }
    Start-Sleep -Milliseconds 200
}

Write-Host ""

# Prueba 2: Verificar estad√≠sticas iniciales de Redis
Write-Host "üìà Prueba 2: Estad√≠sticas iniciales de Redis..." -ForegroundColor Yellow

$stats = Test-Endpoint "http://localhost/redis-stats"
if ($stats.Success) {
    $gameState = $stats.Content.gameState
    Write-Host "   ‚úì Apuestas actuales: $($gameState.currentBets)" -ForegroundColor Green
    Write-Host "   ‚úì Jugadores activos: $($gameState.activePlayers)" -ForegroundColor Green
    Write-Host "   ‚úì Estado de ronda: $($gameState.roundState)" -ForegroundColor Green
} else {
    Write-Host "   ‚úó Error obteniendo estad√≠sticas: $($stats.Error)" -ForegroundColor Red
}

Write-Host ""

# Prueba 3: Verificar distribuci√≥n de carga
Write-Host "‚öñÔ∏è Prueba 3: Verificando distribuci√≥n de carga..." -ForegroundColor Yellow

$instances = @{}
for ($i = 1; $i -le 12; $i++) {
    $result = Test-Endpoint "http://localhost/redis-stats"
    if ($result.Success) {
        $instance = $result.Content.instance
        if ($instances.ContainsKey($instance)) {
            $instances[$instance]++
        } else {
            $instances[$instance] = 1
        }
    }
    Start-Sleep -Milliseconds 100
}

Write-Host "   Distribuci√≥n de peticiones:"
foreach ($instance in $instances.Keys) {
    $count = $instances[$instance]
    $percentage = [Math]::Round(($count / 12) * 100, 1)
    Write-Host "   ‚úì $instance : $count peticiones ($percentage%)" -ForegroundColor Green
}

Write-Host ""

# Prueba 4: Simular carga de apuestas (esto requerir√≠a un cliente WebSocket real)
Write-Host "üéØ Prueba 4: Estado final del sistema..." -ForegroundColor Yellow

$finalStats = Test-Endpoint "http://localhost/redis-stats"
if ($finalStats.Success) {
    Write-Host "   ‚úì Sistema funcionando correctamente" -ForegroundColor Green
    Write-Host "   ‚úì Instancia respondiendo: $($finalStats.Content.instance)" -ForegroundColor Green
    Write-Host "   ‚úì Redis conectado: $($finalStats.Content.redis)" -ForegroundColor Green
    Write-Host "   ‚úì Timestamp: $($finalStats.Content.timestamp)" -ForegroundColor Green
} else {
    Write-Host "   ‚úó Error en verificaci√≥n final: $($finalStats.Error)" -ForegroundColor Red
}

Write-Host ""

# Prueba 5: Limpiar estado de Redis (opcional)
Write-Host "üßπ Prueba 5: Limpieza de estado (opcional)..." -ForegroundColor Yellow
$response = Read-Host "¬øDesea limpiar el estado de Redis? (y/N)"

if ($response -eq "y" -or $response -eq "Y") {
    $clearResult = Test-Endpoint "http://localhost/redis-clear" "POST"
    if ($clearResult.Success) {
        Write-Host "   ‚úì Estado de Redis limpiado exitosamente" -ForegroundColor Green
    } else {
        Write-Host "   ‚úó Error limpiando Redis: $($clearResult.Error)" -ForegroundColor Red
    }
} else {
    Write-Host "   ‚úì Estado de Redis mantenido" -ForegroundColor Green
}

Write-Host ""
Write-Host "üéâ Pruebas de sincronizaci√≥n de Redis completadas!" -ForegroundColor Blue
Write-Host "üìã Resumen:"
Write-Host "   ‚Ä¢ Load Balancer: ‚úÖ Funcionando"
Write-Host "   ‚Ä¢ Redis: ‚úÖ Conectado"
Write-Host "   ‚Ä¢ Instancias Backend: ‚úÖ $($instances.Count) activas"
Write-Host "   ‚Ä¢ Distribuci√≥n: ‚úÖ Balanceada"
Write-Host ""